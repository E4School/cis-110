id: 2
question: "Randomly generate a decimal number between 10 and 100, and convert it to binary"
answer: "Example: To convert 13 to binary, we repeatedly divide by 2 and track the remainders: 13 ÷ 2 = 6 remainder 1, 6 ÷ 2 = 3 remainder 0, 3 ÷ 2 = 1 remainder 1, 1 ÷ 2 = 0 remainder 1. Reading the remainders from bottom to top gives us 1101. We can verify: 1×8 + 1×4 + 0×2 + 1×1 = 8 + 4 + 0 + 1 = 13. Therefore, 13 in decimal equals 1101 in binary."
vocab_answer: 
  - word: "decimal"
    definition: "Base-10 number system using digits 0-9"
  - word: "binary conversion"
    definition: "Process of changing numbers from decimal to binary or vice versa"
  - word: "remainder"
    definition: "What's left over after division"
  - word: "place value"
    definition: "The value of a digit based on its position in a number"
answer_kindergarten: "Let's turn the number 13 into computer language (binary)! It's like breaking a number into groups of 2. First, I'll ask: can 13 be split into 2 equal groups? 13 ÷ 2 = 6 with 1 leftover. Write down that 1! Now can 6 be split? 6 ÷ 2 = 3 with 0 leftover. Write down that 0! Can 3 be split? 3 ÷ 2 = 1 with 1 leftover. Write that 1! Finally, 1 ÷ 2 = 0 with 1 leftover. Write that 1! Now read the leftovers backwards: 1101. That's 13 in computer language!"
vocab_kindergarten:
  - word: "computer language"
    definition: "Binary numbers that computers understand (0s and 1s)"
  - word: "split into groups"
    definition: "Dividing a number to see how many groups of 2 we can make"
  - word: "leftover"
    definition: "What remains when we can't make another complete group"
  - word: "reading backwards"
    definition: "Looking at our leftovers from bottom to top to get the binary answer"
answer_3rd_grade: "Converting 13 to binary is like finding out how many groups of powers of 2 fit into 13. We use division by 2 repeatedly. Step 1: 13 ÷ 2 = 6 remainder 1 (write down 1). Step 2: 6 ÷ 2 = 3 remainder 0 (write down 0). Step 3: 3 ÷ 2 = 1 remainder 1 (write down 1). Step 4: 1 ÷ 2 = 0 remainder 1 (write down 1). Reading our remainders from bottom to top: 1101. Check: In binary, this means 1×8 + 1×4 + 0×2 + 1×1 = 8+4+0+1 = 13 ✓"
vocab_3rd_grade:
  - word: "powers of 2"
    definition: "Numbers you get by multiplying 2 by itself: 1, 2, 4, 8, 16, etc."
  - word: "division by 2"
    definition: "Splitting a number into two equal parts to find groups"
  - word: "remainders"
    definition: "The parts left over that can't make complete groups"
  - word: "bottom to top"
    definition: "Reading our remainders in reverse order to get the binary result"
  - word: "checking our work"
    definition: "Converting back to decimal to make sure we got the right answer"
answer_7th_grade: "Converting decimal 13 to binary uses the division-by-2 algorithm. This method exploits the fact that binary place values are powers of 2 (1, 2, 4, 8, 16...). Algorithm: Divide by 2, record remainder, repeat with quotient until quotient = 0. For 13: 13÷2=6 r1, 6÷2=3 r0, 3÷2=1 r1, 1÷2=0 r1. Binary result: 1101₂. Verification using positional notation: 1×2³ + 1×2² + 0×2¹ + 1×2⁰ = 8+4+0+1 = 13₁₀. This algorithm works because each division extracts the least significant bit."
vocab_7th_grade:
  - word: "division-by-2 algorithm"
    definition: "Systematic method for converting decimal numbers to binary"
  - word: "binary place values"
    definition: "Position-based values in binary: 1, 2, 4, 8, 16, etc."
  - word: "quotient"
    definition: "The result of division (not including the remainder)"
  - word: "positional notation"
    definition: "Number system where digit value depends on position"
  - word: "least significant bit"
    definition: "The rightmost binary digit, representing the 1s place"
  - word: "powers of 2"
    definition: "Exponential values: 2⁰=1, 2¹=2, 2²=4, 2³=8, etc."
answer_high_school: "Decimal-to-binary conversion implements the division-remainder algorithm, which systematically decomposes a decimal integer into its binary representation. For n=13: apply floor division and modulo operations iteratively. 13 mod 2 = 1 (LSB), 13÷2=6; 6 mod 2 = 0, 6÷2=3; 3 mod 2 = 1, 3÷2=1; 1 mod 2 = 1 (MSB), 1÷2=0. Result: 1101₂. This algorithm extracts coefficients for the polynomial expansion 13 = ∑(aᵢ × 2ⁱ) where aᵢ ∈ {0,1}. Alternative methods include successive subtraction of largest powers of 2, or direct polynomial coefficient determination."
vocab_high_school:
  - word: "division-remainder algorithm"
    definition: "Mathematical procedure using division and modulo operations"
  - word: "floor division"
    definition: "Division operation that returns only the integer quotient"
  - word: "modulo operations"
    definition: "Mathematical operation that returns the remainder after division"
  - word: "LSB/MSB"
    definition: "Least/Most Significant Bit - rightmost/leftmost binary digits"
  - word: "polynomial expansion"
    definition: "Expressing numbers as sums of powers with coefficients"
  - word: "coefficients"
    definition: "The binary digits (0 or 1) that multiply each power of 2"
  - word: "successive subtraction"
    definition: "Alternative conversion method removing largest powers of 2"
answer_undergraduate: "Decimal-to-binary conversion represents a fundamental radix transformation implementing Horner's method in reverse. The algorithm performs repeated Euclidean division by the target base (2), extracting digits through modular arithmetic. For n=13: applying the iterative relation aᵢ = n mod 2, n ← ⌊n/2⌋ yields the binary representation through coefficient extraction in the polynomial form ∑(aᵢ × 2ⁱ). This process has O(log₂ n) complexity and can be optimized using bitwise operations (n & 1 for LSB, n >> 1 for right shift). Hardware implementations utilize shift registers and parallel processing for simultaneous multi-bit conversion in logarithmic time complexity."
vocab_undergraduate:
  - word: "radix transformation"
    definition: "Mathematical conversion between different number base systems"
  - word: "Horner's method"
    definition: "Efficient algorithm for polynomial evaluation and base conversion"
  - word: "Euclidean division"
    definition: "Division algorithm yielding quotient and remainder simultaneously"
  - word: "modular arithmetic"
    definition: "Mathematical system using remainders after division"
  - word: "coefficient extraction"
    definition: "Process of determining polynomial coefficients through systematic division"
  - word: "bitwise operations"
    definition: "Computer operations that manipulate individual bits directly"
  - word: "shift registers"
    definition: "Hardware circuits that move binary data left or right"
  - word: "logarithmic time complexity"
    definition: "Algorithm efficiency proportional to log of input size"
topics: ["binary conversion", "number systems", "algorithms"]
type: "problem_solving"
points: 3
difficulty: "beginner"
learning_objectives:
  - "Apply binary conversion techniques"
  - "Understand place value in binary"
  - "Practice computational thinking"