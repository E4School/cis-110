id: 19
question: "What is the difference between a compiler and an interpreter?"
answer: "A compiler and interpreter are both tools that process programming code, but they work differently. A **compiler** translates the entire program into machine code before execution, creating a separate executable file that can run independently and typically runs faster. An **interpreter** reads and executes the program line-by-line in real-time without creating a separate executable file, making it easier to test and debug but generally slower to run. Compiled languages (like C++) must be compiled before running, while interpreted languages (like Python) can be run directly from source code. Some languages use both approaches - for example, Java compiles to bytecode which is then interpreted by the Java Virtual Machine."
vocab_answer: 
  - word: "interpreter"
    definition: "Program that executes source code directly, line by line"
  - word: "compilation"
    definition: "Process of translating entire program to machine code before execution"
  - word: "interpretation"
    definition: "Process of executing source code directly without pre-compilation"
  - word: "bytecode"
    definition: "Intermediate code between source code and machine code"
  - word: "virtual machine"
    definition: "Software that simulates a computer to run bytecode or interpreted programs"
type: "short_answer"
points: 6
difficulty: "beginner"
learning_objectives:
  - "Compare compilation and interpretation approaches"
  - "Understand trade-offs between speed and flexibility"
  - "Recognize different program execution models"