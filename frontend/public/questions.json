[
  {
    "id": "ch1-1",
    "chapter": 1,
    "chapterTitle": "Hardware How We Got Physics To Do Math R",
    "question": "Explain the IPOS model of activities characteristics of computers",
    "answer": "Input (data entry), Processing (CPU executes instructions transforming data), Output (results presented to user/devices), Storage (persistent retention). It frames every program as a pipeline where correctness, performance, and usability hinge on clean inputs, efficient processing, appropriate output formatting, and reliable storage.",
    "type": "short-answer"
  },
  {
    "id": "ch1-2",
    "chapter": 1,
    "chapterTitle": "Hardware How We Got Physics To Do Math R",
    "question": "Describe the stored program concept and why it distinguishes computers from other simpler devices",
    "answer": "Instructions are stored in memory alongside data, allowing a general‑purpose machine to change behavior simply by loading different code (flexibility, reprogrammability). Simpler devices (e.g., hard‑wired calculators) have fixed logic; changing behavior requires hardware redesign.",
    "type": "short-answer"
  },
  {
    "id": "ch1-3",
    "chapter": 1,
    "chapterTitle": "Hardware How We Got Physics To Do Math R",
    "question": "Explain how a processor works",
    "answer": "The CPU repeatedly performs the fetch‑decode‑execute cycle: fetch instruction from memory (via program counter), decode (control unit interprets opcode, sets control signals), execute (ALU / other units perform operation), write back results, update PC. Modern CPUs add pipelining, caches, out‑of‑order execution, and branch prediction to increase throughput.",
    "type": "short-answer"
  },
  {
    "id": "ch1-4",
    "chapter": 1,
    "chapterTitle": "Hardware How We Got Physics To Do Math R",
    "question": "Explain the difference between RAM and ROM and why most computers have both",
    "answer": "RAM is volatile, fast read/write working memory; contents lost on power off. ROM (or flash/firmware) is non‑volatile, primarily read (or infrequently written) and holds bootstrap / firmware code needed before RAM and storage subsystems initialize. Together they enable reliable startup plus flexible runtime execution.",
    "type": "short-answer"
  },
  {
    "id": "ch1-5",
    "chapter": 1,
    "chapterTitle": "Hardware How We Got Physics To Do Math R",
    "question": "Explain what I/O devices are and why they are important to computing",
    "answer": "Peripherals that allow interaction with the external world (input: keyboard, sensors; output: displays, printers). They convert between human/physical signals and digital data, enabling practical usefulness of computation.",
    "type": "short-answer"
  },
  {
    "id": "ch1-6",
    "chapter": 1,
    "chapterTitle": "Hardware How We Got Physics To Do Math R",
    "question": "Analyze how the components of a computer system work together to execute a simple program",
    "answer": "User initiates program (stored on persistent storage) → OS loader copies executable segments into RAM → CPU fetches instructions using addresses resolved via MMU/cache hierarchy → instructions request data (caches / RAM / storage via I/O bus) → results buffered and eventually output via drivers to devices; OS schedules CPU time and manages resources throughout.",
    "type": "short-answer"
  },
  {
    "id": "ch1-7",
    "chapter": 1,
    "chapterTitle": "Hardware How We Got Physics To Do Math R",
    "question": "Compare and contrast different computer architectures (desktop, mobile, embedded systems)",
    "answer": "Desktop: high performance, modular, higher power draw. Mobile: energy efficiency, integrated system‑on‑chip, thermal constraints, wireless focus. Embedded: purpose‑specific, minimal UI, real‑time constraints, long lifecycle, often hardened. Trade‑offs revolve around performance vs power vs specialization.",
    "type": "short-answer"
  },
  {
    "id": "ch1-8",
    "chapter": 1,
    "chapterTitle": "Hardware How We Got Physics To Do Math R",
    "question": "Trace the flow of data through a computer system from input to output",
    "answer": "Input device generates signals → driver interprets and places data into OS buffers → user process reads data (system call) → CPU processes, manipulating in registers and RAM (caches accelerate) → results passed to output subsystem (system call) → driver formats & sends to device → device renders (screen, printer, network packet).",
    "type": "short-answer"
  },
  {
    "id": "ch1-9",
    "chapter": 1,
    "chapterTitle": "Hardware How We Got Physics To Do Math R",
    "question": "Evaluate the trade-offs between performance, cost, and energy efficiency in computer design",
    "answer": "Increasing cores/clocks boosts performance but raises power/thermal design and cost. Energy efficiency improves battery life / operating cost but may reduce peak performance. Optimal design selects sufficient performance headroom while minimizing total cost of ownership (purchase + energy + cooling) for target workload.",
    "type": "short-answer"
  },
  {
    "id": "ch2-1",
    "chapter": 2,
    "chapterTitle": "Storage How We Got Physics To Remember S",
    "question": "Discuss the relative strengths and weaknesses of magnetic, optical, and solid-state storage technology",
    "answer": "Magnetic (HDD): high capacity, low cost/GB, slower seek, mechanical wear. Optical (DVD/Blu‑ray): removable, good for archiving/distribution, slower, limited rewrite cycles, lower capacity now. Solid‑state (SSD/NVMe): very fast, shock‑resistant, lower latency, higher cost/GB (though narrowing), finite write endurance.",
    "type": "short-answer"
  },
  {
    "id": "ch2-2",
    "chapter": 2,
    "chapterTitle": "Storage How We Got Physics To Remember S",
    "question": "Explain the role of file management",
    "answer": "Organizes storage for retrieval, version tracking, collaboration, and data integrity (naming, hierarchy, metadata usage, backups).",
    "type": "short-answer"
  },
  {
    "id": "ch2-3",
    "chapter": 2,
    "chapterTitle": "Storage How We Got Physics To Remember S",
    "question": "Discuss file naming conventions and the role of the file extension",
    "answer": "Conventions: descriptive, version tokens, no spaces/special chars (or consistent). Extension signals format to OS/application for association and parsing.",
    "type": "short-answer"
  },
  {
    "id": "ch2-4",
    "chapter": 2,
    "chapterTitle": "Storage How We Got Physics To Remember S",
    "question": "Explain the difference between an absolute path and a relative path",
    "answer": "Absolute: full location from root drive. Relative: location expressed from current working directory or parent reference.",
    "type": "short-answer"
  },
  {
    "id": "ch2-5",
    "chapter": 2,
    "chapterTitle": "Storage How We Got Physics To Remember S",
    "question": "Explain the difference between the logical and physical storage models for a file",
    "answer": "Logical: hierarchical directories & filenames. Physical: actual block locations managed by filesystem & hardware translation layers (e.g., wear leveling on SSDs).",
    "type": "short-answer"
  },
  {
    "id": "ch2-6",
    "chapter": 2,
    "chapterTitle": "Storage How We Got Physics To Remember S",
    "question": "Design an efficient file organization system for a specific use case (academic, professional, creative)",
    "answer": "Example academic: /Course/Week#/Topic/ with consistent prefixes (YYYY-MM-DD), separate /Resources, /Drafts, /Final, using version suffixes (v1, v2) and periodic archival.",
    "type": "short-answer"
  },
  {
    "id": "ch3-1",
    "chapter": 3,
    "chapterTitle": "Operating Systems Programs That Run Prog",
    "question": "Explain what a device driver is",
    "answer": "Low‑level software that provides a standardized interface between OS subsystems and specific hardware, translating generic OS calls into device‑specific commands and handling interrupts/events.",
    "type": "short-answer"
  },
  {
    "id": "ch3-2",
    "chapter": 3,
    "chapterTitle": "Operating Systems Programs That Run Prog",
    "question": "Explain the role of the operating system",
    "answer": "Abstracts hardware, schedules processes/threads, manages memory, filesystems, I/O, security (auth, permissions), networking, and provides APIs.",
    "type": "short-answer"
  },
  {
    "id": "ch3-3",
    "chapter": 3,
    "chapterTitle": "Operating Systems Programs That Run Prog",
    "question": "Explain the difference between multitasking, multiprocessing, and multithreading",
    "answer": "Multitasking: OS interleaves processes (logical concurrency). Multiprocessing: multiple physical cores/CPUs execute tasks truly in parallel. Multithreading: multiple threads within a process sharing memory space for finer concurrency.",
    "type": "short-answer"
  },
  {
    "id": "ch3-4",
    "chapter": 3,
    "chapterTitle": "Operating Systems Programs That Run Prog",
    "question": "Analyze how the components of a computer system work together to execute a simple program",
    "answer": "User initiates program (stored on persistent storage) → OS loader copies executable segments into RAM → CPU fetches instructions using addresses resolved via MMU/cache hierarchy → instructions request data (caches / RAM / storage via I/O bus) → results buffered and eventually output via drivers to devices; OS schedules CPU time and manages resources throughout.",
    "type": "short-answer"
  },
  {
    "id": "ch4-1",
    "chapter": 4,
    "chapterTitle": "Software Systems How We Make Them",
    "question": "Explain the difference between system software and application software",
    "answer": "System software manages hardware/resources (OS, utilities); application software performs end‑user tasks.",
    "type": "short-answer"
  },
  {
    "id": "ch4-2",
    "chapter": 4,
    "chapterTitle": "Software Systems How We Make Them",
    "question": "Discuss the purpose of software licensing and identify common types",
    "answer": "Defines legal use/redistribution; types: proprietary EULA, GPL (copyleft), MIT/Apache (permissive), shareware/trial, subscription (SaaS).",
    "type": "short-answer"
  },
  {
    "id": "ch4-3",
    "chapter": 4,
    "chapterTitle": "Software Systems How We Make Them",
    "question": "Explain the difference between local apps and Web based apps",
    "answer": "Local: installed, offline capable, deeper hardware integration. Web: delivered via browser, easy updates, cross‑platform, relies on network.",
    "type": "short-answer"
  },
  {
    "id": "ch4-4",
    "chapter": 4,
    "chapterTitle": "Software Systems How We Make Them",
    "question": "Explain the role of the basic office suite applications and their relation to each other",
    "answer": "Word processor (documents), spreadsheet (tabular quantitative analysis), presentation tool (visual communication). They share data (embedding, linking) and common UI paradigms.",
    "type": "short-answer"
  },
  {
    "id": "ch4-5",
    "chapter": 4,
    "chapterTitle": "Software Systems How We Make Them",
    "question": "Troubleshoot common software installation and configuration problems",
    "answer": "Steps: verify system requirements, check network/firewall, validate checksum/signature, run installer logs, isolate conflicting processes, clean environment variables, re‑install dependencies.",
    "type": "short-answer"
  },
  {
    "id": "ch4-6",
    "chapter": 4,
    "chapterTitle": "Software Systems How We Make Them",
    "question": "Compare different operating systems and their strengths for various computing tasks",
    "answer": "Windows: broad hardware/software ecosystem. macOS: integrated hardware + creative software. Linux: server, customization, containerization. Mobile OS (iOS/Android): touch, sensor integration.",
    "type": "short-answer"
  },
  {
    "id": "ch4-7",
    "chapter": 4,
    "chapterTitle": "Software Systems How We Make Them",
    "question": "Evaluate software alternatives based on functionality, cost, and licensing requirements",
    "answer": "Build comparison matrix (features, TCO, support, extensibility, compliance). Select option meeting must‑have features with lowest risk/long‑term cost.",
    "type": "short-answer"
  },
  {
    "id": "ch4-8",
    "chapter": 4,
    "chapterTitle": "Software Systems How We Make Them",
    "question": "Explain the software development lifecycle and how it impacts end users",
    "answer": "Phases (requirements → design → implementation → testing → deployment → maintenance) influence stability, security, and responsiveness to user feedback; mature processes reduce regressions.",
    "type": "short-answer"
  },
  {
    "id": "ch4-9",
    "chapter": 4,
    "chapterTitle": "Software Systems How We Make Them",
    "question": "Explain how Wikipedia articles are written and edited",
    "answer": "Collaborative editing via MediaWiki; neutral point of view and verifiability policies; revision history + talk pages mediate disputes; consensus governs content.",
    "type": "short-answer"
  },
  {
    "id": "ch5-1",
    "chapter": 5,
    "chapterTitle": "Databases How Systems Remember Stuff",
    "question": "Define basic database terminology, such as fields, records, rows, columns, and tables",
    "answer": "Table: structured collection; row/record: single entity instance; column/field: attribute; schema: structural definition.",
    "type": "short-answer"
  },
  {
    "id": "ch5-2",
    "chapter": 5,
    "chapterTitle": "Databases How Systems Remember Stuff",
    "question": "Explain what a relational database is",
    "answer": "A structured collection organizing data into tables with defined relationships enforced via keys and set‑based query logic (relational algebra).",
    "type": "short-answer"
  },
  {
    "id": "ch5-3",
    "chapter": 5,
    "chapterTitle": "Databases How Systems Remember Stuff",
    "question": "Explain the process of normalization",
    "answer": "Decomposing tables to reduce redundancy and anomalies (1NF atomic values, 2NF remove partial dependencies, 3NF remove transitive dependencies) balancing with performance.",
    "type": "short-answer"
  },
  {
    "id": "ch5-4",
    "chapter": 5,
    "chapterTitle": "Databases How Systems Remember Stuff",
    "question": "Explain what SQL is and identify common SQL commands and give a concrete example",
    "answer": "Declarative language for defining/manipulating data. Core: SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER. Example: `SELECT name, price FROM products WHERE price > 100 ORDER BY price DESC;`.",
    "type": "short-answer"
  },
  {
    "id": "ch5-5",
    "chapter": 5,
    "chapterTitle": "Databases How Systems Remember Stuff",
    "question": "Explain what big data is",
    "answer": "Datasets of high volume, velocity, or variety that exceed traditional relational processing capabilities; require distributed storage/compute (Hadoop, Spark) and specialized tooling.",
    "type": "short-answer"
  },
  {
    "id": "ch5-6",
    "chapter": 5,
    "chapterTitle": "Databases How Systems Remember Stuff",
    "question": "Explain what NoSQL is",
    "answer": "Non‑relational data stores (document, key‑value, wide‑column, graph) optimizing for horizontal scalability, flexible schemas, or specific access patterns.",
    "type": "short-answer"
  },
  {
    "id": "ch5-7",
    "chapter": 5,
    "chapterTitle": "Databases How Systems Remember Stuff",
    "question": "Design a simple database schema for a real-world scenario",
    "answer": "Example bookstore: Tables: Authors(id PK, name), Books(id PK, title, author_id FK, price), Orders(id PK, customer_id FK, order_date), OrderItems(order_id FK, book_id FK, qty). Index frequent lookups (Books.title, Orders.order_date).",
    "type": "short-answer"
  },
  {
    "id": "ch5-8",
    "chapter": 5,
    "chapterTitle": "Databases How Systems Remember Stuff",
    "question": "Write basic SQL queries to retrieve and manipulate data",
    "answer": "Retrieval: `SELECT title FROM Books WHERE price < 20;` Manipulation: `UPDATE Books SET price = price * 0.9 WHERE author_id = 7;` Insertion: `INSERT INTO Authors(name) VALUES ('Ada Lovelace');`",
    "type": "short-answer"
  },
  {
    "id": "ch5-9",
    "chapter": 5,
    "chapterTitle": "Databases How Systems Remember Stuff",
    "question": "Analyze the trade-offs between different database types for specific applications",
    "answer": "Relational: strong consistency/ACID; Document: flexible schema, denormalization for speed; Key‑value: ultra‑fast simple lookups; Graph: relationship traversal efficiency; Wide‑column: high write scalability for large sparse datasets.",
    "type": "short-answer"
  },
  {
    "id": "ch5-10",
    "chapter": 5,
    "chapterTitle": "Databases How Systems Remember Stuff",
    "question": "Explain how databases integrate with web applications and business systems",
    "answer": "App layer uses drivers/ORM to execute SQL/queries, caches results, enforces business rules; transactions ensure consistency; APIs or message queues connect downstream analytics, reporting, and services.",
    "type": "short-answer"
  },
  {
    "id": "ch6-1",
    "chapter": 6,
    "chapterTitle": "Web Fundamentals How Billions Of Systems",
    "question": "Explain how the Web works",
    "answer": "Clients (browsers) send HTTP(S) requests to servers using URLs; servers process (often via application logic + databases) and return responses (HTML, JSON, media). Hyperlinks interconnect documents forming a navigable graph.",
    "type": "short-answer"
  },
  {
    "id": "ch6-2",
    "chapter": 6,
    "chapterTitle": "Web Fundamentals How Billions Of Systems",
    "question": "Discuss the integration of three technologies that are foundational for the Web",
    "answer": "HTML structures content; CSS controls presentation; JavaScript enables dynamic behavior and client‑side logic. Together they separate concerns—structure, style, interactivity—allowing iterative and maintainable development.",
    "type": "short-answer"
  },
  {
    "id": "ch6-3",
    "chapter": 6,
    "chapterTitle": "Web Fundamentals How Billions Of Systems",
    "question": "Explain what the four parts of a URL are",
    "answer": "Scheme (protocol, e.g., https), host (domain), path (resource location), and optional query (key=value parameters) + fragment (in‑page anchor). (Some models treat port or fragment as additional components.)",
    "type": "short-answer"
  },
  {
    "id": "ch6-4",
    "chapter": 6,
    "chapterTitle": "Web Fundamentals How Billions Of Systems",
    "question": "Explain what a hyperlink is",
    "answer": "An element (usually an <a> tag) referencing another resource by URL enabling non‑linear navigation.",
    "type": "short-answer"
  },
  {
    "id": "ch6-5",
    "chapter": 6,
    "chapterTitle": "Web Fundamentals How Billions Of Systems",
    "question": "Explain the role of a Web browser with respect to caching, history, and privacy",
    "answer": "Browser caches resources (improves performance), maintains history (navigation convenience), and mediates privacy (cookie storage, tracking prevention, sandboxing). User settings balance speed versus confidentiality.",
    "type": "short-answer"
  },
  {
    "id": "ch6-6",
    "chapter": 6,
    "chapterTitle": "Web Fundamentals How Billions Of Systems",
    "question": "Explain what HTTP and HTTPS are",
    "answer": "Application‑layer request/response protocols; HTTPS layers HTTP over TLS to encrypt and authenticate, protecting confidentiality and integrity.",
    "type": "short-answer"
  },
  {
    "id": "ch6-7",
    "chapter": 6,
    "chapterTitle": "Web Fundamentals How Billions Of Systems",
    "question": "Explain what a Web cookie is",
    "answer": "Small key/value data stored client‑side by the browser, sent with subsequent requests to same domain—used for sessions, preferences, tracking.",
    "type": "short-answer"
  },
  {
    "id": "ch6-8",
    "chapter": 6,
    "chapterTitle": "Web Fundamentals How Billions Of Systems",
    "question": "Explain what HTML is",
    "answer": "Markup language defining semantic structure of web documents (headings, paragraphs, media, forms). Parsed into the DOM.",
    "type": "short-answer"
  },
  {
    "id": "ch6-9",
    "chapter": 6,
    "chapterTitle": "Web Fundamentals How Billions Of Systems",
    "question": "Identify 5 common HTML tags and explain what they do",
    "answer": "<h1>-<h6>: headings hierarchy; <p>: paragraph; <a>: hyperlink; <img>: embeds image; <div>: generic block container; <form>: user input submission context.",
    "type": "short-answer"
  },
  {
    "id": "ch6-10",
    "chapter": 6,
    "chapterTitle": "Web Fundamentals How Billions Of Systems",
    "question": "Explain what CSS is",
    "answer": "Stylesheet language that selects DOM elements and applies presentation rules (layout, color, typography, responsive adjustments).",
    "type": "short-answer"
  },
  {
    "id": "ch6-11",
    "chapter": 6,
    "chapterTitle": "Web Fundamentals How Billions Of Systems",
    "question": "Explain the role of JavaScript in a Web page",
    "answer": "Enables dynamic DOM manipulation, event handling, asynchronous network calls (fetch), client logic, and integration with APIs and storage.",
    "type": "short-answer"
  },
  {
    "id": "ch6-12",
    "chapter": 6,
    "chapterTitle": "Web Fundamentals How Billions Of Systems",
    "question": "Design a simple webpage that demonstrates understanding of HTML structure and CSS styling",
    "answer": "(Example) HTML skeleton with semantic header/main/footer; CSS for responsive layout using flexbox; styled navigation; accessible alt text. (*Omitted source for brevity—can be added on request.*)",
    "type": "short-answer"
  },
  {
    "id": "ch6-13",
    "chapter": 6,
    "chapterTitle": "Web Fundamentals How Billions Of Systems",
    "question": "Evaluate the accessibility and usability of web interfaces",
    "answer": "Check semantic markup, ARIA where needed, color contrast, keyboard navigation, responsive scaling, meaningful alt text, and consistent feedback; usability aligns with predictable navigation and minimized cognitive load.",
    "type": "short-answer"
  },
  {
    "id": "ch7-1",
    "chapter": 7,
    "chapterTitle": "Web Advanced Why Systems Don T Get Hacke",
    "question": "Analyze the security implications of different web technologies (cookies, JavaScript, HTTPS)",
    "answer": "Cookies can enable CSRF / tracking if not scoped (SameSite, HttpOnly); JavaScript introduces XSS risk; HTTPS mitigates eavesdropping but not application logic flaws; improper CSP/CORS settings expand attack surface.",
    "type": "short-answer"
  },
  {
    "id": "ch7-2",
    "chapter": 7,
    "chapterTitle": "Web Advanced Why Systems Don T Get Hacke",
    "question": "Explain how cloud computing relates to web technologies and modern applications",
    "answer": "Cloud provides scalable infrastructure (compute, storage, functions, CDN) underpinning web backends; enables elasticity, global distribution, managed services (databases, auth) that web apps leverage for performance and reliability.",
    "type": "short-answer"
  },
  {
    "id": "ch8-1",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Explain what encryption is",
    "answer": "Transforming plaintext into ciphertext using an algorithm + key to ensure confidentiality (reversible only with key).",
    "type": "short-answer"
  },
  {
    "id": "ch8-2",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Explain what two-factor authentication is",
    "answer": "Combining two independent credential factors (something you know, have, are) to reduce compromise risk.",
    "type": "short-answer"
  },
  {
    "id": "ch8-3",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Discuss issues with creating a strong password",
    "answer": "Balancing memorability vs entropy; risks: reuse, predictable patterns, social engineering exposure; mitigations: passphrases, managers.",
    "type": "short-answer"
  },
  {
    "id": "ch8-4",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Explain what malware is",
    "answer": "Malicious software designed to exploit, disrupt, steal, or extort (viruses, worms, trojans, ransomware, spyware).",
    "type": "short-answer"
  },
  {
    "id": "ch8-5",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Explain what a rootkit is",
    "answer": "Stealth malware that hides its presence by modifying low‑level system components (kernel/drivers) to maintain privileged concealed access.",
    "type": "short-answer"
  },
  {
    "id": "ch8-6",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Identify common malware exploits",
    "answer": "Unpatched vulnerabilities (buffer overflows), phishing delivery, drive‑by downloads, malicious macros, supply chain tampering.",
    "type": "short-answer"
  },
  {
    "id": "ch8-7",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Describe how an online intrusion takes place",
    "answer": "Recon (enumerate targets) → initial access (phish/exploit) → privilege escalation → lateral movement → data exfiltration / persistence setup → cleanup or ransomware deployment.",
    "type": "short-answer"
  },
  {
    "id": "ch8-8",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Explain what a zero-day exploit is",
    "answer": "Attack leveraging a previously unknown and unpatched vulnerability; defenders have “zero days” to prepare.",
    "type": "short-answer"
  },
  {
    "id": "ch8-9",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Explain the role of a firewall",
    "answer": "Filters traffic per policy (ports, IPs, protocols), enforcing segmentation and reducing attack surface.",
    "type": "short-answer"
  },
  {
    "id": "ch8-10",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Explain what spoofing is",
    "answer": "Masquerading as a trusted entity (IP, MAC, email, caller ID) to bypass controls or mislead users.",
    "type": "short-answer"
  },
  {
    "id": "ch8-11",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Explain what social engineering is",
    "answer": "Psychological manipulation to elicit confidential actions/information (phishing, pretexting, baiting, tailgating).",
    "type": "short-answer"
  },
  {
    "id": "ch8-12",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Develop a comprehensive personal cybersecurity strategy including risk assessment",
    "answer": "Inventory assets → assess threats/vulnerabilities → apply controls (MFA, updates, least privilege, backups, password manager, encrypted storage, phishing training) → monitor & review.",
    "type": "short-answer"
  },
  {
    "id": "ch8-13",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Analyze real-world security breaches and identify prevention strategies",
    "answer": "Typically involve patch delays, credential reuse, misconfigurations. Strategies: timely patching, zero trust segmentation, strong auth, encryption at rest/in transit, continuous monitoring.",
    "type": "short-answer"
  },
  {
    "id": "ch8-14",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Evaluate the security posture of common online services and applications",
    "answer": "Assess encryption usage, MFA availability, breach history, logging transparency, data minimization, compliance certifications.",
    "type": "short-answer"
  },
  {
    "id": "ch8-15",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Design secure communication protocols for sensitive information sharing",
    "answer": "Use end‑to‑end encryption (modern AEAD ciphers), forward secrecy (ephemeral keys via Diffie-Hellman), mutual authentication, integrity checks, minimal metadata.",
    "type": "short-answer"
  },
  {
    "id": "ch8-16",
    "chapter": 8,
    "chapterTitle": "Cybersecurity Oops Systems Do Get Hacked",
    "question": "Assess the balance between security measures and usability in system design",
    "answer": "Overly strict controls cause workarounds; iterative user testing finds equilibrium where friction yields meaningful risk reduction.",
    "type": "short-answer"
  },
  {
    "id": "ch9-1",
    "chapter": 9,
    "chapterTitle": "People How Systems Shape Society",
    "question": "Explain what social media is",
    "answer": "Platforms enabling user‑generated content creation, sharing, and interaction at scale via network effects.",
    "type": "short-answer"
  },
  {
    "id": "ch9-2",
    "chapter": 9,
    "chapterTitle": "People How Systems Shape Society",
    "question": "List three elements of a social media profile",
    "answer": "Username/handle, profile image, bio (plus often links or interests).",
    "type": "short-answer"
  },
  {
    "id": "ch9-3",
    "chapter": 9,
    "chapterTitle": "People How Systems Shape Society",
    "question": "Explain how 6 degrees of separation applies to social networking",
    "answer": "Suggests short path lengths between any two users, facilitating rapid information diffusion and virality.",
    "type": "short-answer"
  },
  {
    "id": "ch9-4",
    "chapter": 9,
    "chapterTitle": "People How Systems Shape Society",
    "question": "Discuss why blogs were considered a disruptive technology",
    "answer": "Lowered publishing barrier, disintermediated traditional media gatekeepers, accelerated niche and real‑time commentary.",
    "type": "short-answer"
  },
  {
    "id": "ch9-5",
    "chapter": 9,
    "chapterTitle": "People How Systems Shape Society",
    "question": "Discuss the pros and cons of Webmail and local mail",
    "answer": "Webmail: ubiquitous access, reduced client maintenance, server‑side filtering; cons: privacy dependence on provider, offline limitations. Local (client) mail: offline access, potential privacy control; cons: configuration, sync, backup overhead.",
    "type": "short-answer"
  },
  {
    "id": "ch9-6",
    "chapter": 9,
    "chapterTitle": "People How Systems Shape Society",
    "question": "List the elements that constitute an online identity",
    "answer": "Credentials (username/email), profile attributes, activity history, connections, behavioral metadata (time, device), and content artifacts.",
    "type": "short-answer"
  },
  {
    "id": "ch9-7",
    "chapter": 9,
    "chapterTitle": "People How Systems Shape Society",
    "question": "List four techniques for dealing with cyberbullies",
    "answer": "Document incidents, block/report offenders, adjust privacy settings, seek support (trusted adults/platform moderation), avoid escalation.",
    "type": "short-answer"
  },
  {
    "id": "ch9-8",
    "chapter": 9,
    "chapterTitle": "People How Systems Shape Society",
    "question": "Design a digital citizenship plan that balances online engagement with privacy protection",
    "answer": "Use pseudonymous accounts where appropriate, strong unique passwords & MFA, minimal oversharing, scheduled screen breaks, curated follows, periodic privacy audits.",
    "type": "short-answer"
  },
  {
    "id": "ch9-9",
    "chapter": 9,
    "chapterTitle": "People How Systems Shape Society",
    "question": "Compare traditional media distribution models with modern digital platforms",
    "answer": "Traditional: centralized editorial control, scheduled releases. Digital: decentralized creators, algorithmic feeds, on‑demand consumption, rapid iteration, monetization fragmentation.",
    "type": "short-answer"
  },
  {
    "id": "ch9-10",
    "chapter": 9,
    "chapterTitle": "People How Systems Shape Society",
    "question": "Assess the impact of algorithmic content curation on information consumption",
    "answer": "Filter bubbles, engagement amplification, potential polarization, but also personalization efficiency; transparency and user controls are mitigating factors.",
    "type": "short-answer"
  },
  {
    "id": "ch10-1",
    "chapter": 10,
    "chapterTitle": "You How Systems Shapes You",
    "question": "List the six rights that are exclusively exercised by copyright holders",
    "answer": "Reproduction, distribution, public performance, public display, derivative works, digital audio transmission (sound recordings).",
    "type": "short-answer"
  },
  {
    "id": "ch10-2",
    "chapter": 10,
    "chapterTitle": "You How Systems Shapes You",
    "question": "List the four factors that characterize fair use",
    "answer": "Purpose and character, nature of the work, amount/substantiality, effect on market value.",
    "type": "short-answer"
  },
  {
    "id": "ch10-3",
    "chapter": 10,
    "chapterTitle": "You How Systems Shapes You",
    "question": "Analyze the ethical implications of data collection by social media platforms",
    "answer": "Tensions: personalization vs surveillance, consent clarity, data minimization, algorithmic bias, secondary use without informed user control.",
    "type": "short-answer"
  },
  {
    "id": "ch10-4",
    "chapter": 10,
    "chapterTitle": "You How Systems Shapes You",
    "question": "Evaluate data privacy and ethical considerations in database design",
    "answer": "Minimize data collection, apply encryption (at rest, in transit), role‑based access, retention limits, consent tracking, audit logging, anonymization/pseudonymization.",
    "type": "short-answer"
  },
  {
    "id": "ch10-5",
    "chapter": 10,
    "chapterTitle": "You How Systems Shapes You",
    "question": "Evaluate the credibility and reliability of online information sources",
    "answer": "Assess source authority, evidence citation, corroboration by independent outlets, update history, potential conflicts of interest, and bias indicators.",
    "type": "short-answer"
  }
]